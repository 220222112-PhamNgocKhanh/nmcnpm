const Notification = require('../models/Notification');
const EmailService = require('../services/EmailService');
const Joi = require('joi'); // Th∆∞ vi·ªán validate d·ªØ li·ªáu

class NotificationController {
    
    // Schema validate d·ªØ li·ªáu ƒë·∫ßu v√†o
    static createNotificationSchema = Joi.object({
        recipient_email: Joi.string().email().required()
            .messages({
                'string.email': 'Email kh√¥ng h·ª£p l·ªá',
                'any.required': 'Email l√† b·∫Øt bu·ªôc'
            }),
        recipient_name: Joi.string().min(1).max(100).required()
            .messages({
                'any.required': 'T√™n ng∆∞·ªùi nh·∫≠n l√† b·∫Øt bu·ªôc'
            }),
        subject: Joi.string().min(1).max(255).when('template_type', {
            is: Joi.exist(),
            then: Joi.optional(), // N·∫øu c√≥ template th√¨ subject t√πy ch·ªçn
            otherwise: Joi.required() // Kh√¥ng c√≥ template th√¨ subject b·∫Øt bu·ªôc
        }),
        message: Joi.string().when('template_type', {
            is: Joi.exist(),
            then: Joi.optional(),
            otherwise: Joi.required()
        }),
        template_type: Joi.string().valid('welcome', 'order_confirm', 'promotion').optional(),
        metadata: Joi.object().optional(),
        scheduled_at: Joi.date().greater('now').optional()
            .messages({
                'date.greater': 'Th·ªùi gian h·∫πn g·ª≠i ph·∫£i l·ªõn h∆°n hi·ªán t·∫°i'
            })
    });

    // API t·∫°o th√¥ng b√°o m·ªõi
    // POST /api/notifications
    static async createNotification(req, res) {
        try {
            // Validate d·ªØ li·ªáu ƒë·∫ßu v√†o
            const { error, value } = NotificationController.createNotificationSchema.validate(req.body);
            if (error) {
                return res.status(400).json({
                    success: false,
                    message: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá',
                    errors: error.details.map(detail => detail.message)
                });
            }

            // T·∫°o notification m·ªõi
            const notification = new Notification(value);
            await notification.save();

            console.log(`üìù T·∫°o notification m·ªõi: ID ${notification.id}`);

            // N·∫øu kh√¥ng ph·∫£i scheduled th√¨ g·ª≠i lu√¥n
            if (!notification.scheduled_at) {
                // G·ª≠i email ngay (async, kh√¥ng ch·ªù)
                EmailService.sendEmail(notification)
                    .then(result => {
                        if (result.success) {
                            console.log(`‚úÖ Email ID ${notification.id} ƒë√£ g·ª≠i th√†nh c√¥ng`);
                        }
                    })
                    .catch(error => {
                        console.error(`‚ùå L·ªói g·ª≠i email ID ${notification.id}:`, error);
                    });
            }

            res.status(201).json({
                success: true,
                message: 'T·∫°o th√¥ng b√°o th√†nh c√¥ng',
                data: {
                    id: notification.id,
                    status: notification.status,
                    scheduled_at: notification.scheduled_at
                }
            });

        } catch (error) {
            console.error('‚ùå L·ªói t·∫°o notification:', error);
            res.status(500).json({
                success: false,
                message: 'L·ªói server n·ªôi b·ªô',
                error: error.message
            });
        }
    }

    // API l·∫•y th√¥ng tin notification theo ID
    // GET /api/notifications/:id
    static async getNotification(req, res) {
        try {
            const { id } = req.params;

            // Validate ID
            if (!id || isNaN(id)) {
                return res.status(400).json({
                    success: false,
                    message: 'ID kh√¥ng h·ª£p l·ªá'
                });
            }

            const notification = await Notification.findById(id);
            
            if (!notification) {
                return res.status(404).json({
                    success: false,
                    message: 'Kh√¥ng t√¨m th·∫•y th√¥ng b√°o'
                });
            }

            res.json({
                success: true,
                data: notification
            });

        } catch (error) {
            console.error('‚ùå L·ªói l·∫•y notification:', error);
            res.status(500).json({
                success: false,
                message: 'L·ªói server n·ªôi b·ªô',
                error: error.message
            });
        }
    }

    // API l·∫•y l·ªãch s·ª≠ th√¥ng b√°o c·ªßa m·ªôt email
    // GET /api/notifications/history/:email
    static async getNotificationHistory(req, res) {
        try {
            const { email } = req.params;
            const limit = parseInt(req.query.limit) || 50;

            // Validate email
            const emailSchema = Joi.string().email().required();
            const { error } = emailSchema.validate(email);
            if (error) {
                return res.status(400).json({
                    success: false,
                    message: 'Email kh√¥ng h·ª£p l·ªá'
                });
            }

            const notifications = await Notification.getByEmail(email, limit);

            res.json({
                success: true,
                data: notifications,
                total: notifications.length
            });

        } catch (error) {
            console.error('‚ùå L·ªói l·∫•y l·ªãch s·ª≠ notification:', error);
            res.status(500).json({
                success: false,
                message: 'L·ªói server n·ªôi b·ªô',
                error: error.message
            });
        }
    }

    // API g·ª≠i l·∫°i email th·∫•t b·∫°i
    // POST /api/notifications/:id/resend
    static async resendNotification(req, res) {
        try {
            const { id } = req.params;

            const notification = await Notification.findById(id);
            if (!notification) {
                return res.status(404).json({
                    success: false,
                    message: 'Kh√¥ng t√¨m th·∫•y th√¥ng b√°o'
                });
            }

            // Ch·ªâ cho ph√©p g·ª≠i l·∫°i nh·ªØng email failed ho·∫∑c pending
            if (!['failed', 'pending'].includes(notification.status)) {
                return res.status(400).json({
                    success: false,
                    message: 'Ch·ªâ c√≥ th·ªÉ g·ª≠i l·∫°i email c√≥ tr·∫°ng th√°i failed ho·∫∑c pending'
                });
            }

            // Reset l·∫°i retry count v√† status
            await Notification.updateStatus(id, 'pending');
            notification.status = 'pending';
            notification.retry_count = 0;

            // G·ª≠i email
            const result = await EmailService.sendEmail(notification);

            if (result.success) {
                res.json({
                    success: true,
                    message: 'G·ª≠i l·∫°i email th√†nh c√¥ng'
                });
            } else {
                res.status(500).json({
                    success: false,
                    message: 'G·ª≠i l·∫°i email th·∫•t b·∫°i',
                    error: result.error
                });
            }

        } catch (error) {
            console.error('‚ùå L·ªói g·ª≠i l·∫°i notification:', error);
            res.status(500).json({
                success: false,
                message: 'L·ªói server n·ªôi b·ªô',
                error: error.message
            });
        }
    }

    // API x·ª≠ l√Ω h√†ng lo·∫°t email ƒëang ch·ªù (d√πng cho cron job)
    // POST /api/notifications/process-pending
    static async processPendingNotifications(req, res) {
        try {
            await EmailService.processPendingEmails();
            
            res.json({
                success: true,
                message: 'ƒê√£ x·ª≠ l√Ω xong pending notifications'
            });

        } catch (error) {
            console.error('‚ùå L·ªói x·ª≠ l√Ω pending notifications:', error);
            res.status(500).json({
                success: false,
                message: 'L·ªói server n·ªôi b·ªô',
                error: error.message
            });
        }
    }

    // API th·ªëng k√™
    // GET /api/notifications/stats
    static async getStats(req, res) {
        try {
            const { pool } = require('../config/database');
            
            const query = `
                SELECT 
                    status,
                    COUNT(*) as count,
                    DATE(created_at) as date
                FROM notifications 
                WHERE created_at >= DATE_SUB(NOW(), INTERVAL 7 DAY)
                GROUP BY status, DATE(created_at)
                ORDER BY date DESC
            `;
            
            const [rows] = await pool.execute(query);
            
            res.json({
                success: true,
                data: rows
            });

        } catch (error) {
            console.error('‚ùå L·ªói l·∫•y th·ªëng k√™:', error);
            res.status(500).json({
                success: false,
                message: 'L·ªói server n·ªôi b·ªô',
                error: error.message
            });
        }
    }
}

module.exports = NotificationController;