const { transporter } = require('../config/email');
const Notification = require('../models/Notification');

class EmailService {
    
    // Template email ch√†o m·ª´ng kh√°ch h√†ng m·ªõi
    static getWelcomeTemplate(name) {
        return {
            subject: 'üéâ Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi C·ª≠a h√†ng XYZ!',
            html: `
                <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
                    <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 30px; text-align: center;">
                        <h1 style="color: white; margin: 0;">Ch√†o m·ª´ng ${name}!</h1>
                    </div>
                    <div style="padding: 30px; background: #f8f9fa;">
                        <p>C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω t√†i kho·∫£n t·∫°i C·ª≠a h√†ng XYZ!</p>
                        <p>B·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu mua s·∫Øm ngay b√¢y gi·ªù v·ªõi h√†ng ng√†n s·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng.</p>
                        <div style="text-align: center; margin: 30px 0;">
                            <a href="#" style="background: #007bff; color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px;">
                                B·∫Øt ƒë·∫ßu mua s·∫Øm
                            </a>
                        </div>
                        <p>Tr√¢n tr·ªçng,<br>ƒê·ªôi ng≈© C·ª≠a h√†ng XYZ</p>
                    </div>
                </div>
            `
        };
    }

    // Template x√°c nh·∫≠n ƒë∆°n h√†ng
    static getOrderConfirmTemplate(name, orderData) {
        const { orderId, totalAmount, items } = orderData;
        
        let itemsHtml = items.map(item => 
            `<tr>
                <td style="padding: 10px; border-bottom: 1px solid #eee;">${item.name}</td>
                <td style="padding: 10px; border-bottom: 1px solid #eee; text-align: center;">${item.quantity}</td>
                <td style="padding: 10px; border-bottom: 1px solid #eee; text-align: right;">${item.price.toLocaleString()}ƒë</td>
            </tr>`
        ).join('');

        return {
            subject: `‚úÖ X√°c nh·∫≠n ƒë∆°n h√†ng #${orderId}`,
            html: `
                <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
                    <div style="background: #28a745; padding: 20px; text-align: center;">
                        <h1 style="color: white; margin: 0;">ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n!</h1>
                    </div>
                    <div style="padding: 30px;">
                        <p>Xin ch√†o ${name},</p>
                        <p>C·∫£m ∆°n b·∫°n ƒë√£ ƒë·∫∑t h√†ng! ƒê∆°n h√†ng #${orderId} c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n.</p>
                        
                        <h3>Chi ti·∫øt ƒë∆°n h√†ng:</h3>
                        <table style="width: 100%; border-collapse: collapse;">
                            <thead>
                                <tr style="background: #f8f9fa;">
                                    <th style="padding: 10px; text-align: left;">S·∫£n ph·∫©m</th>
                                    <th style="padding: 10px; text-align: center;">S·ªë l∆∞·ª£ng</th>
                                    <th style="padding: 10px; text-align: right;">Gi√°</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${itemsHtml}
                            </tbody>
                            <tfoot>
                                <tr style="background: #f8f9fa; font-weight: bold;">
                                    <td colspan="2" style="padding: 15px;">T·ªïng c·ªông:</td>
                                    <td style="padding: 15px; text-align: right;">${totalAmount.toLocaleString()}ƒë</td>
                                </tr>
                            </tfoot>
                        </table>
                        
                        <p style="margin-top: 30px;">ƒê∆°n h√†ng s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω trong 1-2 ng√†y l√†m vi·ªác.</p>
                        <p>Tr√¢n tr·ªçng,<br>ƒê·ªôi ng≈© C·ª≠a h√†ng XYZ</p>
                    </div>
                </div>
            `
        };
    }

    
    // H√†m ch√≠nh g·ª≠i email
    static async sendEmail(notification) {
        try {
            let emailContent;
            
            // Ch·ªçn template theo lo·∫°i th√¥ng b√°o
            switch (notification.template_type) {
                case 'welcome':
                    emailContent = this.getWelcomeTemplate(notification.recipient_name);
                    break;
                    
                case 'order_confirm':
                    emailContent = this.getOrderConfirmTemplate(
                        notification.recipient_name, 
                        notification.metadata
                    );
                    break;
                    
                    
                default:
                    // Email th√¥ng th∆∞·ªùng kh√¥ng d√πng template
                    emailContent = {
                        subject: notification.subject,
                        html: notification.message
                    };
            }

            // C·∫•u h√¨nh email s·∫Ω g·ª≠i
            const mailOptions = {
                from: process.env.EMAIL_FROM,              // Ng∆∞·ªùi g·ª≠i
                to: notification.recipient_email,          // Ng∆∞·ªùi nh·∫≠n
                subject: emailContent.subject,             // Ti√™u ƒë·ªÅ
                html: emailContent.html                    // N·ªôi dung HTML
            };

            // G·ª≠i email th·ª±c t·∫ø
            const result = await transporter.sendMail(mailOptions);
            
            console.log(`‚úÖ G·ª≠i email th√†nh c√¥ng cho ${notification.recipient_email}`);
            
            // C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng
            await Notification.updateStatus(notification.id, 'sent');
            
            return {
                success: true,
                messageId: result.messageId
            };
            
        } catch (error) {
            console.error(`‚ùå L·ªói g·ª≠i email cho ${notification.recipient_email}:`, error.message);
            
            // TƒÉng s·ªë l·∫ßn th·ª≠ g·ª≠i
            await Notification.incrementRetryCount(notification.id);
            
            // N·∫øu th·ª≠ qu√° 3 l·∫ßn th√¨ ƒë√°nh d·∫•u failed
            const updatedNotification = await Notification.findById(notification.id);
            if (updatedNotification.retry_count >= 3) {
                await Notification.updateStatus(notification.id, 'failed', error.message);
            }
            
            return {
                success: false,
                error: error.message
            };
        }
    }

    // X·ª≠ l√Ω h√†ng lo·∫°t notification ƒëang ch·ªù
    static async processPendingEmails() {
        try {
            const pendingNotifications = await Notification.getPendingNotifications();
            
            console.log(`üìß T√¨m th·∫•y ${pendingNotifications.length} email c·∫ßn g·ª≠i`);
            
            // G·ª≠i t·ª´ng email m·ªôt (c√≥ th·ªÉ t·ªëi ∆∞u b·∫±ng Promise.all)
            for (const notification of pendingNotifications) {
                await this.sendEmail(notification);
                
                // Ngh·ªâ 1 gi√¢y gi·ªØa c√°c email ƒë·ªÉ tr√°nh spam
                await new Promise(resolve => setTimeout(resolve, 1000));
            }
            
        } catch (error) {
            console.error('‚ùå L·ªói x·ª≠ l√Ω pending emails:', error.message);
        }
    }
}

module.exports = EmailService;